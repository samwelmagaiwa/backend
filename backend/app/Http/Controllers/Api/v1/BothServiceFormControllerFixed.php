<?php

namespace App\Http\Controllers\Api\v1;

use App\Http\Controllers\Controller;
use App\Models\UserAccess;
use App\Models\User;
use App\Models\Department;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\DB;
use Illuminate\Validation\ValidationException;

class BothServiceFormControllerFixed extends Controller
{
    /**
     * FIXED: Update HOD approval for a module request with proper file upload and module selection
     */
    public function updateHodApproval(Request $request, int $userAccessId): JsonResponse
    {
        try {
            $currentUser = $request->user();
            $userRoles = $currentUser->roles()->pluck('name')->toArray();
            
            // Check if user is HOD
            if (!array_intersect($userRoles, ['head_of_department'])) {
                return response()->json([
                    'success' => false,
                    'message' => 'Access denied. Only HOD can perform this action.'
                ], 403);
            }
            
            Log::info('🔍 HOD APPROVAL UPDATE START', [
                'user_access_id' => $userAccessId,
                'hod_user_id' => $currentUser->id,
                'request_method' => $request->method(),
                'content_type' => $request->header('Content-Type'),
                'has_files' => $request->hasFile('hod_signature'),
                'all_input_keys' => array_keys($request->all())
            ]);
            
            // Enhanced validation with better error messages
            $validated = $request->validate([
                'hod_name' => 'required|string|max:255',
                'hod_signature' => 'required|file|mimes:jpeg,jpg,png,pdf|max:2048',
                'approved_date' => 'required|date',
                'comments' => 'nullable|string|max:1000',
                'access_type' => 'required|in:permanent,temporary',
                'temporary_until' => 'required_if:access_type,temporary|nullable|date|after:today',
                // Module selection validation
                'wellsoft_modules_selected' => 'sometimes|array',
                'wellsoft_modules_selected.*' => 'string',
                'jeeva_modules_selected' => 'sometimes|array', 
                'jeeva_modules_selected.*' => 'string',
                'module_requested_for' => 'sometimes|string|in:use,revoke',
            ], [
                'hod_name.required' => 'HOD name is required',
                'hod_signature.required' => 'HOD signature file is required',
                'hod_signature.mimes' => 'Signature must be in JPEG, JPG, PNG, or PDF format',
                'hod_signature.max' => 'Signature file must not exceed 2MB',
                'approved_date.required' => 'Approval date is required',
                'approved_date.date' => 'Please provide a valid approval date',
                'access_type.required' => 'Access type (permanent/temporary) is required',
                'access_type.in' => 'Access type must be either permanent or temporary',
                'temporary_until.required_if' => 'End date is required for temporary access',
                'temporary_until.after' => 'End date must be in the future',
            ]);
            
            Log::info('✅ Validation passed', [
                'validated_data' => array_except($validated, ['hod_signature']),
                'has_signature_file' => isset($validated['hod_signature'])
            ]);
            
            // Get user access record
            $userAccess = UserAccess::findOrFail($userAccessId);
            
            // Verify HOD can approve this request (from their department)
            $hodDepartment = Department::where('hod_user_id', $currentUser->id)->first();
            if (!$hodDepartment || $userAccess->department_id !== $hodDepartment->id) {
                return response()->json([
                    'success' => false,
                    'message' => 'Access denied. You can only approve requests from your department.'
                ], 403);
            }
            
            Log::info('🏢 Department verification passed', [
                'hod_department_id' => $hodDepartment->id,
                'request_department_id' => $userAccess->department_id,
                'department_name' => $hodDepartment->name
            ]);
            
            DB::beginTransaction();
            
            // FIXED: Handle signature upload with proper error handling
            $hodSignaturePath = null;
            if ($request->hasFile('hod_signature')) {
                try {
                    $hodSignatureFile = $request->file('hod_signature');
                    
                    // Validate file before processing
                    if (!$hodSignatureFile->isValid()) {
                        throw new \Exception('Uploaded signature file is invalid');
                    }
                    
                    // Create directory if it doesn't exist
                    $signatureDir = 'signatures/hod';
                    if (!Storage::disk('public')->exists($signatureDir)) {\n                        Storage::disk('public')->makeDirectory($signatureDir);\n                    }\n                    \n                    // Generate unique filename\n                    $filename = 'hod_signature_' . $userAccess->pf_number . '_' . time() . '.' . $hodSignatureFile->getClientOriginalExtension();\n                    \n                    // Store the file\n                    $hodSignaturePath = $hodSignatureFile->storeAs($signatureDir, $filename, 'public');\n                    \n                    // Verify file was actually stored\n                    if (!Storage::disk('public')->exists($hodSignaturePath)) {\n                        throw new \\Exception('Failed to store signature file');\n                    }\n                    \n                    Log::info('✅ HOD signature uploaded successfully', [\n                        'original_name' => $hodSignatureFile->getClientOriginalName(),\n                        'stored_path' => $hodSignaturePath,\n                        'file_size' => $hodSignatureFile->getSize(),\n                        'mime_type' => $hodSignatureFile->getMimeType()\n                    ]);\n                    \n                } catch (\\Exception $e) {\n                    Log::error('❌ HOD signature upload failed', [\n                        'error' => $e->getMessage(),\n                        'file_info' => [\n                            'name' => $request->file('hod_signature')->getClientOriginalName(),\n                            'size' => $request->file('hod_signature')->getSize(),\n                            'mime' => $request->file('hod_signature')->getMimeType()\n                        ]\n                    ]);\n                    \n                    DB::rollBack();\n                    return response()->json([\n                        'success' => false,\n                        'message' => 'Failed to upload HOD signature: ' . $e->getMessage()\n                    ], 500);\n                }\n            } else {\n                Log::error('❌ No HOD signature file provided', [\n                    'has_file' => $request->hasFile('hod_signature'),\n                    'files' => $request->allFiles()\n                ]);\n                \n                DB::rollBack();\n                return response()->json([\n                    'success' => false,\n                    'message' => 'HOD signature file is required'\n                ], 422);\n            }\n            \n            // FIXED: Process module selections properly\n            $updateData = [\n                'hod_name' => $validated['hod_name'],\n                'hod_signature_path' => $hodSignaturePath,\n                'hod_approved_at' => $validated['approved_date'],\n                'hod_comments' => $validated['comments'] ?? null,\n                'hod_approved_by' => $currentUser->id,\n                'hod_approved_by_name' => $currentUser->name,\n                'access_type' => $validated['access_type'],\n                'temporary_until' => $validated['access_type'] === 'temporary' ? $validated['temporary_until'] : null,\n                'status' => 'hod_approved'\n            ];\n            \n            // FIXED: Handle module selections if provided\n            if ($request->has('wellsoft_modules_selected')) {\n                $wellsoftModules = $request->input('wellsoft_modules_selected', []);\n                if (is_array($wellsoftModules)) {\n                    $updateData['wellsoft_modules'] = $wellsoftModules;\n                    $updateData['wellsoft_modules_selected'] = $wellsoftModules;\n                    \n                    Log::info('✅ Wellsoft modules processed', [\n                        'modules' => $wellsoftModules,\n                        'count' => count($wellsoftModules)\n                    ]);\n                }\n            }\n            \n            if ($request->has('jeeva_modules_selected')) {\n                $jeevaModules = $request->input('jeeva_modules_selected', []);\n                if (is_array($jeevaModules)) {\n                    $updateData['jeeva_modules'] = $jeevaModules;\n                    $updateData['jeeva_modules_selected'] = $jeevaModules;\n                    \n                    Log::info('✅ Jeeva modules processed', [\n                        'modules' => $jeevaModules,\n                        'count' => count($jeevaModules)\n                    ]);\n                }\n            }\n            \n            if ($request->has('module_requested_for')) {\n                $updateData['module_requested_for'] = $request->input('module_requested_for', 'use');\n                \n                Log::info('✅ Module request type processed', [\n                    'module_requested_for' => $updateData['module_requested_for']\n                ]);\n            }\n            \n            Log::info('🔄 Updating user access record', [\n                'user_access_id' => $userAccess->id,\n                'update_data' => array_except($updateData, ['hod_signature_path']),\n                'has_signature_path' => !empty($updateData['hod_signature_path'])\n            ]);\n            \n            // Update the user access record\n            $userAccess->update($updateData);\n            \n            // Verify the update was successful\n            $userAccess->refresh();\n            \n            Log::info('✅ User access record updated successfully', [\n                'user_access_id' => $userAccess->id,\n                'hod_name' => $userAccess->hod_name,\n                'hod_signature_path' => $userAccess->hod_signature_path,\n                'hod_approved_at' => $userAccess->hod_approved_at,\n                'access_type' => $userAccess->access_type,\n                'temporary_until' => $userAccess->temporary_until,\n                'wellsoft_modules_count' => count($userAccess->wellsoft_modules ?? []),\n                'jeeva_modules_count' => count($userAccess->jeeva_modules ?? []),\n                'module_requested_for' => $userAccess->module_requested_for,\n                'status' => $userAccess->status\n            ]);\n            \n            DB::commit();\n            \n            // Load relationships for response\n            $userAccess->load(['user', 'department']);\n            \n            return response()->json([\n                'success' => true,\n                'message' => 'HOD approval updated successfully.',\n                'data' => [\n                    'request_id' => $userAccess->id,\n                    'status' => $userAccess->status,\n                    'access_rights' => [\n                        'type' => $userAccess->access_type,\n                        'temporary_until' => $userAccess->temporary_until,\n                        'description' => $userAccess->access_type === 'permanent' \n                            ? 'Permanent (until retirement)' \n                            : 'Temporary until ' . ($userAccess->temporary_until ? $userAccess->temporary_until->format('F j, Y') : 'N/A')\n                    ],\n                    'hod_approval' => [\n                        'name' => $userAccess->hod_name,\n                        'approved_at' => $userAccess->hod_approved_at->format('Y-m-d H:i:s'),\n                        'approved_at_formatted' => $userAccess->hod_approved_at->format('m/d/Y'),\n                        'comments' => $userAccess->hod_comments,\n                        'signature_url' => Storage::url($userAccess->hod_signature_path),\n                        'signature_path' => $userAccess->hod_signature_path,\n                        'approved_by' => $userAccess->hod_approved_by_name\n                    ],\n                    'modules' => [\n                        'wellsoft_modules' => $userAccess->wellsoft_modules ?? [],\n                        'jeeva_modules' => $userAccess->jeeva_modules ?? [],\n                        'wellsoft_modules_selected' => $userAccess->wellsoft_modules_selected ?? [],\n                        'jeeva_modules_selected' => $userAccess->jeeva_modules_selected ?? [],\n                        'module_requested_for' => $userAccess->module_requested_for,\n                        'wellsoft_count' => count($userAccess->wellsoft_modules ?? []),\n                        'jeeva_count' => count($userAccess->jeeva_modules ?? [])\n                    ],\n                    'next_step' => $userAccess->getNextApprovalNeeded()\n                ]\n            ]);\n            \n        } catch (ValidationException $e) {\n            DB::rollBack();\n            \n            Log::error('❌ Validation failed for HOD approval', [\n                'errors' => $e->errors(),\n                'user_access_id' => $userAccessId\n            ]);\n            \n            return response()->json([\n                'success' => false,\n                'message' => 'Validation failed',\n                'errors' => $e->errors()\n            ], 422);\n        } catch (\\Exception $e) {\n            DB::rollBack();\n            \n            Log::error('❌ Error updating HOD approval', [\n                'error' => $e->getMessage(),\n                'user_access_id' => $userAccessId,\n                'current_user_id' => $request->user()?->id,\n                'stack_trace' => $e->getTraceAsString()\n            ]);\n            \n            return response()->json([\n                'success' => false,\n                'message' => 'Failed to update HOD approval: ' . $e->getMessage()\n            ], 500);\n        }\n    }\n    \n    /**\n     * FIXED: Enhanced show method with proper module data\n     */\n    public function show(Request $request, int $id): JsonResponse\n    {\n        try {\n            $currentUser = $request->user();\n            $userRoles = $currentUser->roles()->pluck('name')->toArray();\n            \n            // Get the user access request with relationships\n            $userAccess = UserAccess::with(['user', 'department'])\n                ->findOrFail($id);\n            \n            // Check permissions\n            $allowedRoles = ['head_of_department', 'divisional_director', 'ict_director', 'ict_officer', 'admin', 'super_admin'];\n            $canView = false;\n            \n            if ($userAccess->user_id === $currentUser->id) {\n                $canView = true;\n            } else if (array_intersect($userRoles, $allowedRoles)) {\n                $canView = true;\n                \n                if (array_intersect($userRoles, ['head_of_department']) && !array_intersect($userRoles, ['admin', 'super_admin'])) {\n                    $hodDepartment = Department::where('hod_user_id', $currentUser->id)->first();\n                    if (!$hodDepartment || $userAccess->department_id !== $hodDepartment->id) {\n                        $canView = false;\n                    }\n                }\n            }\n            \n            if (!$canView) {\n                return response()->json([\n                    'success' => false,\n                    'message' => 'Access denied.'\n                ], 403);\n            }\n            \n            // FIXED: Transform data with proper module information\n            $transformedData = [\n                'id' => $userAccess->id,\n                'shared' => [\n                    'pfNumber' => $userAccess->pf_number,\n                    'staffName' => $userAccess->staff_name,\n                    'department' => $userAccess->department?->name ?? '',\n                    'phone' => $userAccess->phone_number,\n                ],\n                'signature_path' => $userAccess->signature_path,\n                'signature_url' => $userAccess->signature_path ? Storage::url($userAccess->signature_path) : null,\n                \n                // FIXED: Proper module data\n                'wellsoft_modules_selected' => $userAccess->wellsoft_modules_selected ?? [],\n                'jeeva_modules_selected' => $userAccess->jeeva_modules_selected ?? [],\n                'wellsoft_modules' => $userAccess->wellsoft_modules ?? [],\n                'jeeva_modules' => $userAccess->jeeva_modules ?? [],\n                'module_requested_for' => $userAccess->module_requested_for ?? 'use',\n                \n                'internet_purposes' => $userAccess->internet_purposes ?? [],\n                'access_type' => $userAccess->access_type ?? 'permanent',\n                'temporary_until' => $userAccess->temporary_until,\n                'request_type' => $userAccess->request_type ?? [],\n                'status' => $userAccess->status,\n                \n                // FIXED: Complete approval information\n                'approvals' => [\n                    'hod' => [\n                        'name' => $userAccess->hod_name,\n                        'signature' => $userAccess->hod_signature_path,\n                        'signature_url' => $userAccess->hod_signature_path ? Storage::url($userAccess->hod_signature_path) : null,\n                        'date' => $userAccess->hod_approved_at,\n                        'comments' => $userAccess->hod_comments,\n                        'approved_by' => $userAccess->hod_approved_by_name,\n                        'has_signature' => !empty($userAccess->hod_signature_path),\n                        'is_approved' => !empty($userAccess->hod_approved_at)\n                    ],\n                    'divisionalDirector' => [\n                        'name' => $userAccess->divisional_director_name,\n                        'signature' => $userAccess->divisional_director_signature_path,\n                        'signature_url' => $userAccess->divisional_director_signature_path ? Storage::url($userAccess->divisional_director_signature_path) : null,\n                        'date' => $userAccess->divisional_approved_at,\n                        'comments' => $userAccess->divisional_director_comments,\n                        'has_signature' => !empty($userAccess->divisional_director_signature_path),\n                        'is_approved' => !empty($userAccess->divisional_approved_at)\n                    ],\n                    'directorICT' => [\n                        'name' => $userAccess->ict_director_name,\n                        'signature' => $userAccess->ict_director_signature_path,\n                        'signature_url' => $userAccess->ict_director_signature_path ? Storage::url($userAccess->ict_director_signature_path) : null,\n                        'date' => $userAccess->ict_director_approved_at,\n                        'comments' => $userAccess->ict_director_comments,\n                        'has_signature' => !empty($userAccess->ict_director_signature_path),\n                        'is_approved' => !empty($userAccess->ict_director_approved_at)\n                    ]\n                ],\n                \n                // Implementation data\n                'implementation' => [\n                    'headIT' => [\n                        'name' => $userAccess->head_it_name,\n                        'signature' => $userAccess->head_it_signature_path,\n                        'signature_url' => $userAccess->head_it_signature_path ? Storage::url($userAccess->head_it_signature_path) : null,\n                        'date' => $userAccess->head_it_approved_at,\n                        'has_signature' => !empty($userAccess->head_it_signature_path),\n                        'is_approved' => !empty($userAccess->head_it_approved_at)\n                    ],\n                    'ictOfficer' => [\n                        'name' => $userAccess->ict_officer_name,\n                        'signature' => $userAccess->ict_officer_signature_path,\n                        'signature_url' => $userAccess->ict_officer_signature_path ? Storage::url($userAccess->ict_officer_signature_path) : null,\n                        'date' => $userAccess->ict_officer_implemented_at,\n                        'comments' => $userAccess->ict_officer_comments,\n                        'implementation_comments' => $userAccess->implementation_comments,\n                        'has_signature' => !empty($userAccess->ict_officer_signature_path),\n                        'is_implemented' => !empty($userAccess->ict_officer_implemented_at)\n                    ]\n                ],\n                \n                'created_at' => $userAccess->created_at,\n                'updated_at' => $userAccess->updated_at,\n                'next_approval_step' => $userAccess->getNextApprovalNeeded(),\n                'approval_progress' => $userAccess->getApprovalProgress(),\n                'workflow_stage' => $userAccess->getCurrentWorkflowStage()\n            ];\n            \n            return response()->json([\n                'success' => true,\n                'data' => $transformedData\n            ]);\n            \n        } catch (\\Exception $e) {\n            Log::error('Error getting both service form details', [\n                'error' => $e->getMessage(),\n                'id' => $id,\n                'user_id' => $request->user()?->id\n            ]);\n            \n            return response()->json([\n                'success' => false,\n                'message' => 'Failed to get form details'\n            ], 500);\n        }\n    }\n}